(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{210:function(r,e,t){"use strict";t.r(e);var s=t(0),n=Object(s.a)({},(function(){var r=this,e=r.$createElement,t=r._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("h1",{attrs:{id:"拓展与自定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拓展与自定义"}},[r._v("#")]),r._v(" 拓展与自定义")]),r._v(" "),t("h2",{attrs:{id:"目录结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#目录结构"}},[r._v("#")]),r._v(" 目录结构")]),r._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("screw-driver\n┣━ screw-driver-docs 工具的使用帮助文档,使用vuepress编写(https://www.vuepress.cn/)\n┣━ src/main/resources/SdTemplates 为模板目录,模板通常不会被直接使用,因为当需要该目录的模板时就会copy模板到根目录的SdTemplates文件夹中,如果不存在就创建\n┗━ src/main/java/org/mirrentools/sd/ 代码,基于java1.6编写,maven管理\n\t┣━ common [包]一些通用的工具\n\t┣━ constant [包]一些常量\n\t┣━ converter [包]转换器的接口与实现,分别为接口 > 抽象类(SdAbstract) > 基础实现(SdBasic) > 具体实现(impl包)\n\t┣━ enums [包]一些枚举类\n\t┣━ impl [包]核心工具的基础实现\n\t┣━ models [包]工具的实体类其中db包中update用于创建或修改数据库表信息,query用于查询数据库表信息\n\t┣━ options [包]一些配置信息,其中def包为不同数据库的默认配置\n\t┣━ ScrewDriver (类)核心接口\n\t┣━ ScrewDriverCode (类)生成代码的接口\n\t┣━ ScrewDriverDbUtil (类)数据库相关操作工具\n\t┣━ ScrewDriverException (类)异常类\n\t┣━ ScrewDriverProject (类)创建项目的接口\n\t┣━ ScrewDriverSQL (类)创建或读取操作数据库的接口\n\t┣━ ScrewDriverTemplateEngine (类)模板渲染引擎(生成文件)的接口\n\t┗━ SdType (类)自适应数据类型\n")])])]),t("h2",{attrs:{id:"数据库支持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库支持"}},[r._v("#")]),r._v(" 数据库支持")]),r._v(" "),t("p",[r._v("如果数据库相关操作不兼容,你可以继承ScrewDriverDbUtil接口的实现或converter包中的实现,并重写不兼容的方法后设置 "),t("router-link",{attrs:{to:"/start/core-class-intro.html#screwdriveroptions-工具配置"}},[r._v("ScrewDriverOptions")]),r._v(" 为你重写后的实现。")],1),r._v(" "),t("p",[r._v("如果你想新增其他数据库支持,大楷你需要做这些操作")]),r._v(" "),t("ol",[t("li",[r._v("在org.mirrentools.sd.impl.dbutil包中创建ScrewDriverDbUtil的实现类,可继承SdAbstractDbUtil抽象类,重写抽象类不兼容的方法,可以参考同级实现,推荐命名规则为SdDbUtil新数据库名Impl")]),r._v(" "),t("li",[r._v("在org.mirrentools.sd.converter.impl中创建新数据库名相同的包名,并实现converter中的几个转换器,可以参考同级实现,推荐命名SdXxxConverter新数据库名称Impl")]),r._v(" "),t("li",[r._v("在org.mirrentools.sd.options.def中创建新数据库配置文件,并在ScrewDriverOptions的init方法中判断配置并初始化新数据库配置,可以参考同级实现,推荐命名规则为ScrewDriver新数据库名Options")]),r._v(" "),t("li",[r._v("在org.mirrentools.sd.constant中添加新数据库的常量类")]),r._v(" "),t("li",[r._v("在org.mirrentools.sd.enums.SdTypeMode枚举类中添加新数据库类型,并在 "),t("router-link",{attrs:{to:"/start/sd-type.html"}},[r._v("SdType")]),r._v(" 类中添加新数据库词典以及对应的数据类型")],1)]),r._v(" "),t("h2",{attrs:{id:"自定义模板引擎"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义模板引擎"}},[r._v("#")]),r._v(" 自定义模板引擎")]),r._v(" "),t("p",[r._v("软件目前提供了FreeMarker与MVEL开箱即用的模板引擎,如果这两个不满足或需要自定义模板,")]),r._v(" "),t("p",[r._v("你可以继承"),t("strong",[r._v("org.mirrentools.sd.ScrewDriverTemplateEngine")]),r._v("抽象类并实现render方法,")]),r._v(" "),t("p",[r._v("具体实现可以参考"),t("strong",[r._v("org.mirrentools.sd.impl.ScrewDriverTemplateFreeMarkerImpl")]),r._v(" 或 "),t("strong",[r._v("ScrewDriverTemplateMvelImpl")]),r._v("。")]),r._v(" "),t("p",[r._v("启用自定义模板渲染引擎需要设置 "),t("router-link",{attrs:{to:"/start/core-class-intro.html#screwdriveroptions"}},[r._v("ScrewDriverOptions")]),r._v(" 的templateEngine属性,既调用setTemplateEngine(你的实现类)")],1)])}),[],!1,null,null,null);e.default=n.exports}}]);